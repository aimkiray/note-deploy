{"_path":"/blog/artificial-baka-one","_dir":"blog","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"阿库娅很不错，要整一个吗？","description":"能养成的智能家居系统？好诶！不是虚拟美少女？！！但是但是，大厂生态哪有亲手养大的安心？","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"能养成的智能家居系统？好诶！不是虚拟美少女？！！但是但是，大厂生态哪有亲手养大的安心？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"（可惜是个智障.webp"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"我又不是智障","src":"/blog/artificial-baka-one/i-am-not-baka.jpg"},"children":[]}]},{"type":"element","tag":"h2","props":{"id":"网关部分"},"children":[{"type":"text","value":"网关部分"}]},{"type":"element","tag":"h3","props":{"id":"食材"},"children":[{"type":"text","value":"食材"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"项目大体分为两个阶段。第一阶段，改造现有设备然后接入树莓派 4B，通过 Web 应用实现远程控制，调研中转到 Google Home 的方法（到此为止了）。第二阶段，加持先进的 ML (Magic Learning) 技术，实现 AI (Artificial Idiot) 中枢，彻底替换 Google Home。主要技术指标如下。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"远程控制继电器"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"跨平台用户界面"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"断网也能使用"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"接入 Google Home"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"开源（但不一定安全）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"美少女皮 + 自定义唤醒词"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"先不管有生之年的技术指标，第一阶段用到的软件如下。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"后端"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Raspbian Buster (arm64)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Flask"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"OpenCV 4.2"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"MariaDB 10.4"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Nginx"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"前端"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Jinja2"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Bootstrap 4"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"推荐的开发工具。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"宇宙第一 VS Code"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"宇宙第二 PyCharm"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"不入流 Keil C51"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"为避免消化不良，还需掌握如下技巧。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"对硬件一知半解"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"擅长使用 Google"}]}]},{"type":"element","tag":"h3","props":{"id":"应用架构"},"children":[{"type":"text","value":"应用架构"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"网关硬件就用树莓派，主要提供 REST API，配合 Web 界面进行交互，实现远程控制设备。也可接入第三方服务，比如 Google home（嘤语学习好助手）。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"为了快速上线，后端咱就用了 Python。框架采用 Flask，是一个采用模块化设计理念的 Web 应用框架，也被称为微框架。Flask 没太多默认配置，可以通过 Flask-extension 引入如 MySQL ORM，模板引擎，表单和身份验证等插件。程序使用 MVC 分层架构，便于协作开发和后续扩展，同样为了加速，暂时使用 Jinja2 模板生成器糊出来的前端。"}]},{"type":"element","tag":"img","props":{"src":"/blog/artificial-baka-one/server_all.jpg","style":"height: 300px"},"children":[]},{"type":"element","tag":"h3","props":{"id":"数据库"},"children":[{"type":"text","value":"数据库"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"MariaDB 是 MySQL 在 MySQL 的基础上改进的关系型数据库，在提升性能的同时保持与 MySQL 的完全兼容，仅需简单卸载 MySQL 并安装 MariaDB 即可。"}]},{"type":"element","tag":"img","props":{"src":"/blog/artificial-baka-one/umr_database.png","style":"height: 250px"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"参见 E-R 图，"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"config"}]},{"type":"text","value":" 表保存传感器节点的状态，包括传感器类型，环境数据最大值和最小值，传感器或执行器状态，上次动作源等。"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"sensor"}]},{"type":"text","value":" 表保存传感器历史数据，外键连接 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"config"}]},{"type":"text","value":" 表。"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"camera"}]},{"type":"text","value":" 表保存连续运动的发生时间和截图路径。"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"user"}]},{"type":"text","value":" 表储存用户信息，包括登录名称，用户邮箱，密码等数据。"}]},{"type":"element","tag":"h3","props":{"id":"运动检测"},"children":[{"type":"text","value":"运动检测"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"OpenCV 已经实现了多种常见的检测算法。MOG 算法是一个背景分割算法，以混合高斯模型为基础。此算法使用多个高斯分布混合计算对背景像素建模，指定权重为像素点 RGB 值在整个序列中的持续时间。若一个 RGB 值属于背景像素点，那么它的持续时间相对于运动像素长，相应的权重也更高。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"MOG2 是 MOG 算法的改进。它为每一个像素点单独计算高斯分布，这样能更好的适应由于亮度，噪点等外部参数发生变化而引起的场景变化。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"GMG 算法结合了贝叶斯分割法和静态背景估算法，使用图像序列的一些帧建立背景模型，然后通过贝叶斯估计 (Bayesian Estimation) 识别前景。这是一种自适应算法，更新出现的图像帧具有更高的权重，从而适应光照变化。此外，还可以利用开闭运算等形态学算法，除去噪音。"}]},{"type":"element","tag":"img","props":{"src":"/blog/artificial-baka-one/opencv-motion-detect-export.png","style":"height: 600px"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"运动检测流程如上图所示。"}]},{"type":"element","tag":"h2","props":{"id":"节点部分"},"children":[{"type":"text","value":"节点部分"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"目前初号机只提供温度检测，运动检测，远程监控，自动控制，远程控制等功能。不过第一版只是试验品，咱就先来介绍下当前的硬件施工进度，以及软硬件联合测试的方法。"}]},{"type":"element","tag":"h3","props":{"id":"施工标准"},"children":[{"type":"text","value":"施工标准"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"标准实现至少需要准备如下硬件，更敷衍的实现只需一个带摄像头的电脑。大部分模块网上有成品，没有的也能用面包板凑合下。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Raspberry Pi 4B ×1"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"PI Camera ×1"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"8051 MCU ×1"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"1-Wire temp sensor DS18B20 ×1"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"ZigBee CC2530 SoC ×3"}]}]},{"type":"element","tag":"h3","props":{"id":"mcu"},"children":[{"type":"text","value":"MCU"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"节点 MCU 有 8051/AVR ATmega8/STM32 可选，8051 本来是不会选的，不过手边有几片 8051，就直接回收利用了，用于运行控制程序，处理和保存数据。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"其他还有 ZigBee，传感器模块。ZigBee 负责与其他节点或网关通信，传感器负责感知环境参数。"}]},{"type":"element","tag":"h3","props":{"id":"温度传感器"},"children":[{"type":"text","value":"温度传感器"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"DS18B20 温度传感器使用 1-Wire 总线协议通信，每个传感器都有唯一的 64 位地址，MCU 通过该地址识别和寻址总线上的设备。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"DS18B20 温度传感器定义了读写指令，响应指令和复位指令。除响应指令外，同步信号均由 MCU 产生。为了确保可靠的数据传输，同一时间只能有一个信号存在于 1-Wire 总线上。数据的传输符合单总线协议，按照初始化配置、ROM 指令、工作指令的顺序进行操作，其所有的指令和数据都是从低位开始发送到高位。"}]},{"type":"element","tag":"h3","props":{"id":"zigbee"},"children":[{"type":"text","value":"ZigBee"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"传感器节点的 ZigBee 模块使用网状路由，即单播发送。数据包通过 Mesh 路由发送，发送方知道接收方是否收到完整数据。网状路由最多可以经过 30 个节点来传输数据。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"咱这里用的是成品模块（DL-LN3X），支持串口通信，只需指定节点的地址和数据，即可发送到目的节点，中间的过程由 CC2530 自带的程序处理。"}]},{"type":"element","tag":"h3","props":{"id":"温度采集"},"children":[{"type":"text","value":"温度采集"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"控制温度节点的程序运行在 8051 MCU 上，使用 C 语音开发。如下图，功能是每隔 1s 上传一次温度信息，或者在上位机请求时立即上传温度信息。"}]},{"type":"element","tag":"img","props":{"src":"/blog/artificial-baka-one/wsn-temperature-export.png","style":"height: 400px"},"children":[]},{"type":"element","tag":"h3","props":{"id":"pcb"},"children":[{"type":"text","value":"PCB"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"PCB 板形尺寸确定在 50mm*50mm 以内，完成总体布局后，开始放置组件。组件位置是否合理，将直接关系到电路是否可靠。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在 PCB 布局中，先按照功能模块划分区域，然后考虑各模块的相对位置。任何高频模拟信号或高精度数字信号都应该尽可能保持距离，原则上所有敏感区域利用 GND 相互隔离，信号路径尽可能短。"}]},{"type":"element","tag":"img","props":{"src":"/blog/artificial-baka-one/node-pcb.png","style":"height: 300px"},"children":[]},{"type":"element","tag":"h2","props":{"id":"测试"},"children":[{"type":"text","value":"测试"}]},{"type":"element","tag":"h3","props":{"id":"运行环境"},"children":[{"type":"text","value":"运行环境"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"树莓派安装 Raspbian Buster 系统，使用 virtualenv 创建一个 Python 3 虚拟环境，执行 pip 命令安装所有依赖包。"}]},{"type":"element","tag":"code","props":{"code":"$ pip install -r requirements.txt\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"$ pip install -r requirements.txt\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"运动捕捉相关功能使用 OpenCV 实现，PyPi 预编译的 OpenCV 4 可能缺少部分功能（目前够用了），如果需要完整功能，下面是编译安装的方法。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下载 opencv 和扩展库 opencv_contrib 源码到本地，进入 Python 3 虚拟环境，安装 numpy 和编译工具，使用 CMake 来构建编译配置。"}]},{"type":"element","tag":"code","props":{"code":"$ cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n    -D CMAKE_INSTALL_PREFIX=/usr/local \\\n    -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \\\n    -D ENABLE_NEON=ON \\\n    -D ENABLE_VFPV3=ON \\\n    -D BUILD_TESTS=OFF \\\n    -D OPENCV_ENABLE_NONFREE=ON \\\n    -D INSTALL_PYTHON_EXAMPLES=OFF \\\n    -D BUILD_EXAMPLES=OFF ..\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"$ cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n    -D CMAKE_INSTALL_PREFIX=/usr/local \\\n    -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \\\n    -D ENABLE_NEON=ON \\\n    -D ENABLE_VFPV3=ON \\\n    -D BUILD_TESTS=OFF \\\n    -D OPENCV_ENABLE_NONFREE=ON \\\n    -D INSTALL_PYTHON_EXAMPLES=OFF \\\n    -D BUILD_EXAMPLES=OFF ..\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"确认配置无误，开始编译。"}]},{"type":"element","tag":"code","props":{"code":"# 4个核心，Raspberry Pi 4B 大约需要 1 小时\nmake -j4\nmake install\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"# 4个核心，Raspberry Pi 4B 大约需要 1 小时\nmake -j4\nmake install\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"编译的 OpenCV 默认安装在全局的 site-packages 目录。"}]},{"type":"element","tag":"h3","props":{"id":"数据库-1"},"children":[{"type":"text","value":"数据库"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"安装 MariaDB，使用 flask-migrate 创建数据库。"}]},{"type":"element","tag":"code","props":{"code":"$ python manage.py db init\n$ python manage.py db migrate\n$ python manage.py db upgrade\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"$ python manage.py db init\n$ python manage.py db migrate\n$ python manage.py db upgrade\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"开动吧"},"children":[{"type":"text","value":"开动吧"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"根目录下的 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"gate.py"}]},{"type":"text","value":" 是网关程序的入口文件。在生产环境部署时，还需使用 Nginx 反向代理，以提高系统的稳定性和安全性。"}]},{"type":"element","tag":"code","props":{"code":"$ which python\n/home/xxx/umr-dive/venv/bin/python\n$ export Env=Dev\n$ sudo -E /home/xxx/umr-dive/venv/bin/python gate.py -i 0.0.0.0 -o 80\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"$ which python\n/home/xxx/umr-dive/venv/bin/python\n$ export Env=Dev\n$ sudo -E /home/xxx/umr-dive/venv/bin/python gate.py -i 0.0.0.0 -o 80\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"现在咱有了个能用的智能家居，别的再慢慢扩展，但愿不会成为有生之年系列吧。"}]},{"type":"element","tag":"h2","props":{"id":"reference"},"children":[{"type":"text","value":"Reference"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/aimkiray/udive-gateway","rel":["nofollow"]},"children":[{"type":"text","value":"项目源码"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.pyimagesearch.com/2019/09/02/opencv-stream-video-to-web-browser-html-page/","rel":["nofollow"]},"children":[{"type":"text","value":"OpenCV – Stream video to web browser/HTML page"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.pyimagesearch.com/2019/09/16/install-opencv-4-on-raspberry-pi-4-and-raspbian-buster/","rel":["nofollow"]},"children":[{"type":"text","value":"Install OpenCV 4 on Raspberry Pi 4 and Raspbian Buster"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"未完待续。"}]}]},"date":"2020-02-27T23:55:01.000Z","tags":["iot","pcb","mcu"],"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"能养成的智能家居系统？好诶！不是虚拟美少女？！！但是但是，大厂生态哪有亲手养大的安心？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"（可惜是个智障.webp"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"我又不是智障","src":"/blog/artificial-baka-one/i-am-not-baka.jpg"},"children":[]}]},{"type":"element","tag":"h2","props":{"id":"网关部分"},"children":[{"type":"text","value":"网关部分"}]},{"type":"element","tag":"h3","props":{"id":"食材"},"children":[{"type":"text","value":"食材"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"项目大体分为两个阶段。第一阶段，改造现有设备然后接入树莓派 4B，通过 Web 应用实现远程控制，调研中转到 Google Home 的方法（到此为止了）。第二阶段，加持先进的 ML (Magic Learning) 技术，实现 AI (Artificial Idiot) 中枢，彻底替换 Google Home。主要技术指标如下。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"远程控制继电器"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"跨平台用户界面"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"断网也能使用"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"接入 Google Home"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"开源（但不一定安全）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"美少女皮 + 自定义唤醒词"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"先不管有生之年的技术指标，第一阶段用到的软件如下。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"后端"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Raspbian Buster (arm64)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Flask"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"OpenCV 4.2"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"MariaDB 10.4"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Nginx"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"前端"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Jinja2"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Bootstrap 4"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"推荐的开发工具。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"宇宙第一 VS Code"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"宇宙第二 PyCharm"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"不入流 Keil C51"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"为避免消化不良，还需掌握如下技巧。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"对硬件一知半解"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"擅长使用 Google"}]}]},{"type":"element","tag":"h3","props":{"id":"应用架构"},"children":[{"type":"text","value":"应用架构"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"网关硬件就用树莓派，主要提供 REST API，配合 Web 界面进行交互，实现远程控制设备。也可接入第三方服务，比如 Google home（嘤语学习好助手）。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"为了快速上线，后端咱就用了 Python。框架采用 Flask，是一个采用模块化设计理念的 Web 应用框架，也被称为微框架。Flask 没太多默认配置，可以通过 Flask-extension 引入如 MySQL ORM，模板引擎，表单和身份验证等插件。程序使用 MVC 分层架构，便于协作开发和后续扩展，同样为了加速，暂时使用 Jinja2 模板生成器糊出来的前端。"}]},{"type":"element","tag":"img","props":{"src":"/blog/artificial-baka-one/server_all.jpg","style":"height: 300px"},"children":[]},{"type":"element","tag":"h3","props":{"id":"数据库"},"children":[{"type":"text","value":"数据库"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"MariaDB 是 MySQL 在 MySQL 的基础上改进的关系型数据库，在提升性能的同时保持与 MySQL 的完全兼容，仅需简单卸载 MySQL 并安装 MariaDB 即可。"}]},{"type":"element","tag":"img","props":{"src":"/blog/artificial-baka-one/umr_database.png","style":"height: 250px"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"参见 E-R 图，"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"config"}]},{"type":"text","value":" 表保存传感器节点的状态，包括传感器类型，环境数据最大值和最小值，传感器或执行器状态，上次动作源等。"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"sensor"}]},{"type":"text","value":" 表保存传感器历史数据，外键连接 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"config"}]},{"type":"text","value":" 表。"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"camera"}]},{"type":"text","value":" 表保存连续运动的发生时间和截图路径。"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"user"}]},{"type":"text","value":" 表储存用户信息，包括登录名称，用户邮箱，密码等数据。"}]},{"type":"element","tag":"h3","props":{"id":"运动检测"},"children":[{"type":"text","value":"运动检测"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"OpenCV 已经实现了多种常见的检测算法。MOG 算法是一个背景分割算法，以混合高斯模型为基础。此算法使用多个高斯分布混合计算对背景像素建模，指定权重为像素点 RGB 值在整个序列中的持续时间。若一个 RGB 值属于背景像素点，那么它的持续时间相对于运动像素长，相应的权重也更高。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"MOG2 是 MOG 算法的改进。它为每一个像素点单独计算高斯分布，这样能更好的适应由于亮度，噪点等外部参数发生变化而引起的场景变化。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"GMG 算法结合了贝叶斯分割法和静态背景估算法，使用图像序列的一些帧建立背景模型，然后通过贝叶斯估计 (Bayesian Estimation) 识别前景。这是一种自适应算法，更新出现的图像帧具有更高的权重，从而适应光照变化。此外，还可以利用开闭运算等形态学算法，除去噪音。"}]},{"type":"element","tag":"img","props":{"src":"/blog/artificial-baka-one/opencv-motion-detect-export.png","style":"height: 600px"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"运动检测流程如上图所示。"}]},{"type":"element","tag":"h2","props":{"id":"节点部分"},"children":[{"type":"text","value":"节点部分"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"目前初号机只提供温度检测，运动检测，远程监控，自动控制，远程控制等功能。不过第一版只是试验品，咱就先来介绍下当前的硬件施工进度，以及软硬件联合测试的方法。"}]},{"type":"element","tag":"h3","props":{"id":"施工标准"},"children":[{"type":"text","value":"施工标准"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"标准实现至少需要准备如下硬件，更敷衍的实现只需一个带摄像头的电脑。大部分模块网上有成品，没有的也能用面包板凑合下。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Raspberry Pi 4B ×1"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"PI Camera ×1"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"8051 MCU ×1"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"1-Wire temp sensor DS18B20 ×1"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"ZigBee CC2530 SoC ×3"}]}]},{"type":"element","tag":"h3","props":{"id":"mcu"},"children":[{"type":"text","value":"MCU"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"节点 MCU 有 8051/AVR ATmega8/STM32 可选，8051 本来是不会选的，不过手边有几片 8051，就直接回收利用了，用于运行控制程序，处理和保存数据。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"其他还有 ZigBee，传感器模块。ZigBee 负责与其他节点或网关通信，传感器负责感知环境参数。"}]},{"type":"element","tag":"h3","props":{"id":"温度传感器"},"children":[{"type":"text","value":"温度传感器"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"DS18B20 温度传感器使用 1-Wire 总线协议通信，每个传感器都有唯一的 64 位地址，MCU 通过该地址识别和寻址总线上的设备。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"DS18B20 温度传感器定义了读写指令，响应指令和复位指令。除响应指令外，同步信号均由 MCU 产生。为了确保可靠的数据传输，同一时间只能有一个信号存在于 1-Wire 总线上。数据的传输符合单总线协议，按照初始化配置、ROM 指令、工作指令的顺序进行操作，其所有的指令和数据都是从低位开始发送到高位。"}]},{"type":"element","tag":"h3","props":{"id":"zigbee"},"children":[{"type":"text","value":"ZigBee"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"传感器节点的 ZigBee 模块使用网状路由，即单播发送。数据包通过 Mesh 路由发送，发送方知道接收方是否收到完整数据。网状路由最多可以经过 30 个节点来传输数据。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"咱这里用的是成品模块（DL-LN3X），支持串口通信，只需指定节点的地址和数据，即可发送到目的节点，中间的过程由 CC2530 自带的程序处理。"}]},{"type":"element","tag":"h3","props":{"id":"温度采集"},"children":[{"type":"text","value":"温度采集"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"控制温度节点的程序运行在 8051 MCU 上，使用 C 语音开发。如下图，功能是每隔 1s 上传一次温度信息，或者在上位机请求时立即上传温度信息。"}]},{"type":"element","tag":"img","props":{"src":"/blog/artificial-baka-one/wsn-temperature-export.png","style":"height: 400px"},"children":[]},{"type":"element","tag":"h3","props":{"id":"pcb"},"children":[{"type":"text","value":"PCB"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"PCB 板形尺寸确定在 50mm*50mm 以内，完成总体布局后，开始放置组件。组件位置是否合理，将直接关系到电路是否可靠。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在 PCB 布局中，先按照功能模块划分区域，然后考虑各模块的相对位置。任何高频模拟信号或高精度数字信号都应该尽可能保持距离，原则上所有敏感区域利用 GND 相互隔离，信号路径尽可能短。"}]},{"type":"element","tag":"img","props":{"src":"/blog/artificial-baka-one/node-pcb.png","style":"height: 300px"},"children":[]},{"type":"element","tag":"h2","props":{"id":"测试"},"children":[{"type":"text","value":"测试"}]},{"type":"element","tag":"h3","props":{"id":"运行环境"},"children":[{"type":"text","value":"运行环境"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"树莓派安装 Raspbian Buster 系统，使用 virtualenv 创建一个 Python 3 虚拟环境，执行 pip 命令安装所有依赖包。"}]},{"type":"element","tag":"code","props":{"code":"$ pip install -r requirements.txt\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb98a6"},"children":[{"type":"text","value":"$ pip install -r requirements.txt"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"运动捕捉相关功能使用 OpenCV 实现，PyPi 预编译的 OpenCV 4 可能缺少部分功能（目前够用了），如果需要完整功能，下面是编译安装的方法。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下载 opencv 和扩展库 opencv_contrib 源码到本地，进入 Python 3 虚拟环境，安装 numpy 和编译工具，使用 CMake 来构建编译配置。"}]},{"type":"element","tag":"code","props":{"code":"$ cmake -D CMAKE_BUILD_TYPE=RELEASE \\\n    -D CMAKE_INSTALL_PREFIX=/usr/local \\\n    -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \\\n    -D ENABLE_NEON=ON \\\n    -D ENABLE_VFPV3=ON \\\n    -D BUILD_TESTS=OFF \\\n    -D OPENCV_ENABLE_NONFREE=ON \\\n    -D INSTALL_PYTHON_EXAMPLES=OFF \\\n    -D BUILD_EXAMPLES=OFF ..\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb98a6"},"children":[{"type":"text","value":"$ cmake -D CMAKE_BUILD_TYPE=RELEASE \\"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb98a6"},"children":[{"type":"text","value":"    -D CMAKE_INSTALL_PREFIX=/usr/local \\"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb98a6"},"children":[{"type":"text","value":"    -D OPENCV_EXTRA_MODULES_PATH="}]},{"type":"element","tag":"span","props":{"class":"ct-c4fca7"},"children":[{"type":"text","value":"~"}]},{"type":"element","tag":"span","props":{"class":"ct-bb98a6"},"children":[{"type":"text","value":"/opencv_contrib/modules \\"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb98a6"},"children":[{"type":"text","value":"    -D ENABLE_NEON=ON \\"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb98a6"},"children":[{"type":"text","value":"    -D ENABLE_VFPV3=ON \\"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb98a6"},"children":[{"type":"text","value":"    -D BUILD_TESTS=OFF \\"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb98a6"},"children":[{"type":"text","value":"    -D OPENCV_ENABLE_NONFREE=ON \\"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb98a6"},"children":[{"type":"text","value":"    -D INSTALL_PYTHON_EXAMPLES=OFF \\"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb98a6"},"children":[{"type":"text","value":"    -D BUILD_EXAMPLES=OFF .."}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"确认配置无误，开始编译。"}]},{"type":"element","tag":"code","props":{"code":"# 4个核心，Raspberry Pi 4B 大约需要 1 小时\nmake -j4\nmake install\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-cd7641"},"children":[{"type":"text","value":"# 4个核心，Raspberry Pi 4B 大约需要 1 小时"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb98a6"},"children":[{"type":"text","value":"make -j4"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb98a6"},"children":[{"type":"text","value":"make install"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"编译的 OpenCV 默认安装在全局的 site-packages 目录。"}]},{"type":"element","tag":"h3","props":{"id":"数据库-1"},"children":[{"type":"text","value":"数据库"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"安装 MariaDB，使用 flask-migrate 创建数据库。"}]},{"type":"element","tag":"code","props":{"code":"$ python manage.py db init\n$ python manage.py db migrate\n$ python manage.py db upgrade\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb98a6"},"children":[{"type":"text","value":"$ python manage.py db init"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb98a6"},"children":[{"type":"text","value":"$ python manage.py db migrate"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb98a6"},"children":[{"type":"text","value":"$ python manage.py db upgrade"}]}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"开动吧"},"children":[{"type":"text","value":"开动吧"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"根目录下的 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"gate.py"}]},{"type":"text","value":" 是网关程序的入口文件。在生产环境部署时，还需使用 Nginx 反向代理，以提高系统的稳定性和安全性。"}]},{"type":"element","tag":"code","props":{"code":"$ which python\n/home/xxx/umr-dive/venv/bin/python\n$ export Env=Dev\n$ sudo -E /home/xxx/umr-dive/venv/bin/python gate.py -i 0.0.0.0 -o 80\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb98a6"},"children":[{"type":"text","value":"$ which python"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb98a6"},"children":[{"type":"text","value":"/home/xxx/umr-dive/venv/bin/python"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb98a6"},"children":[{"type":"text","value":"$ "}]},{"type":"element","tag":"span","props":{"class":"ct-c4fca7"},"children":[{"type":"text","value":"export"}]},{"type":"element","tag":"span","props":{"class":"ct-bb98a6"},"children":[{"type":"text","value":" Env=Dev"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-bb98a6"},"children":[{"type":"text","value":"$ sudo -E /home/xxx/umr-dive/venv/bin/python gate.py -i 0.0.0.0 -o 80"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"现在咱有了个能用的智能家居，别的再慢慢扩展，但愿不会成为有生之年系列吧。"}]},{"type":"element","tag":"h2","props":{"id":"reference"},"children":[{"type":"text","value":"Reference"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/aimkiray/udive-gateway","rel":["nofollow"]},"children":[{"type":"text","value":"项目源码"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.pyimagesearch.com/2019/09/02/opencv-stream-video-to-web-browser-html-page/","rel":["nofollow"]},"children":[{"type":"text","value":"OpenCV – Stream video to web browser/HTML page"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.pyimagesearch.com/2019/09/16/install-opencv-4-on-raspberry-pi-4-and-raspbian-buster/","rel":["nofollow"]},"children":[{"type":"text","value":"Install OpenCV 4 on Raspberry Pi 4 and Raspbian Buster"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"未完待续。"}]},{"type":"element","tag":"style","children":[{"type":"text","value":".ct-cd7641{color:#6E7781}.ct-c4fca7{color:#CF222E}.ct-bb98a6{color:#24292F}.dark .ct-bb98a6{color:#C9D1D9}.dark .ct-c4fca7{color:#FF7B72}.dark .ct-cd7641{color:#8B949E}"}]}],"toc":{"title":"","searchDepth":5,"depth":5,"links":[{"id":"网关部分","depth":2,"text":"网关部分","children":[{"id":"食材","depth":3,"text":"食材"},{"id":"应用架构","depth":3,"text":"应用架构"},{"id":"数据库","depth":3,"text":"数据库"},{"id":"运动检测","depth":3,"text":"运动检测"}]},{"id":"节点部分","depth":2,"text":"节点部分","children":[{"id":"施工标准","depth":3,"text":"施工标准"},{"id":"mcu","depth":3,"text":"MCU"},{"id":"温度传感器","depth":3,"text":"温度传感器"},{"id":"zigbee","depth":3,"text":"ZigBee"},{"id":"温度采集","depth":3,"text":"温度采集"},{"id":"pcb","depth":3,"text":"PCB"}]},{"id":"测试","depth":2,"text":"测试","children":[{"id":"运行环境","depth":3,"text":"运行环境"},{"id":"数据库-1","depth":3,"text":"数据库"},{"id":"开动吧","depth":3,"text":"开动吧"}]},{"id":"reference","depth":2,"text":"Reference"}]}},"_type":"markdown","_id":"content:blog:artificial-baka-one.md","_source":"content","_file":"blog/artificial-baka-one.md","_extension":"md"}