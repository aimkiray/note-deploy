{"_path":"/blog/use-hpc-like-pc","_dir":"blog","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"超算也能用来建站吗？","description":"超算上跑的程序一般都会针对任务调度系统定制优化，比如将大规模优化问题通过数学方法分解成数个子问题，或者 FFT 之类的适合分解的算法，配合调度工具并行计算出结果再迭代解出原问题。","excerpt":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"概述"},"children":[{"type":"text","value":"概述"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"传统超算由多个计算节点组成，每个节点有自己的操作系统，可独立或与其他节点协同工作。设计难点在于传输带宽和延迟，共享内存，并行存储，散热，软件优化等方面。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"文中使用的超算，其计算节点看起来是个 Linux 服务器，可以 SSH 登录，节点间使用 InfiniBand 协议通信，共享 home 目录。超算常用于并行计算，实际使用中一般不会亲自 SSH 上去部署服务，而是通过任务调度工具，比如 Slurm (Simple Linux Utility for Resource Management)，开源的超算资源管理软件，在 TOP500 超算中占有率超过 50%。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"超算上跑的程序一般都会针对任务调度系统定制优化，比如将大规模优化问题通过数学方法分解成数个子问题，或者 FFT 之类的适合分解的算法，配合调度工具并行计算出结果再迭代解出原问题。"}]},{"type":"element","tag":"h2","props":{"id":"食材"},"children":[{"type":"text","value":"食材"}]},{"type":"element","tag":"h3","props":{"id":"slurm"},"children":[{"type":"text","value":"Slurm"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Slurm 调度工具常见于 Linux 超算，简单说下部署任务时常用的方法。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"salloc"}]},{"type":"text","value":": 先抢占资源，后部署任务。执行 salloc 命令获取节点资源（如果是超算中心需要排队等待，排到后就开始计费），此时可以手动 ssh 登录计算节点。当用户退出节点时任务自动终止，适合软件测试。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"srun"}]},{"type":"text","value":": 交互式提交任务。命令提交后会在终端实时返回程序输出内容，程序退出自动释放资源，适合交互式单节点任务。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"sbatch"}]},{"type":"text","value":": 批量提交任务。将节点类型，任务数量，资源需求等参数和执行程序的命令写在 Bash 脚本中提交，在所有任务执行完成后释放资源（执行失败也会释放），适合并行或多步任务。"}]}]},{"type":"element","tag":"h3","props":{"id":"modules"},"children":[{"type":"text","value":"Modules"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用 pacman / apt 安装软件时会也会自动安装依赖，而超算出于安全和稳定的考虑，禁止用户获取 root 权限，用户不能使用 apt 之类的包管理工具，取而代之的是 environment modules。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Modules 是一个 Shell 初始化工具，可在 Shell 中动态加载依赖的软件/库（由管理员预装）。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"查看可用的 gcc 软件版本。"}]},{"type":"element","tag":"code","props":{"code":"module avail >> module.log 2>&1\ncat module.log | grep gcc\n\ngcc/4.4.7-kd\ngcc/4.9.2-fenggl\ngcc/7.3.0-wzm\ngcc/8.1.0-wjl\ngcc/8.3.0-wzm\ngcc/9.1.0-fenggl\n...\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"module avail >> module.log 2>&1\ncat module.log | grep gcc\n\ngcc/4.4.7-kd\ngcc/4.9.2-fenggl\ngcc/7.3.0-wzm\ngcc/8.1.0-wjl\ngcc/8.3.0-wzm\ngcc/9.1.0-fenggl\n...\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"复制软件全称，载入到当前环境。"}]},{"type":"element","tag":"code","props":{"code":"module load gcc/8.1.0-wjl\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"module load gcc/8.1.0-wjl\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"之后就能用 GCC 8.1 编译程序了。但如果是 Python Web 程序，依赖太多，找管理员一个个添加也不太合适。不如换个思路，不知道大家有没有想到容器呢？"}]},{"type":"element","tag":"h3","props":{"id":"singularity"},"children":[{"type":"text","value":"Singularity"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Singularity 是专为超算打造的容器，支持 InfiniBand 和 GPU 等 PCIe 设备，对性能的损耗可以忽略不计。我们可以在本地打包 Singularity 镜像，再到超算上用 environment modules 加载 Singularity 来运行镜像。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"回到正题，那么先尝试部署个 screenfetch 获取节点的硬件信息。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Singularity 兼容 Docker 镜像，也有自己的镜像格式。创建 singularity 定义文件"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"screenfetch.def"}]},{"type":"text","value":"，写入如下内容。"}]},{"type":"element","tag":"code","props":{"code":"Bootstrap: docker\nFrom: ubuntu:18.04\n\n%help\n    App: screenfetch\n    Usage: singulaity exec <image name> <command>\n\n%files\n    /etc/apt/sources.list\n    /etc/ssl/certs /etc/ssl/certs\n\n%post\n    apt-get update && apt-get install -y screenfetch\n    rm -rf /var/lib/apt/lists/*\n\n%environment\n    export LC_ALL=C\n\n%runscript\n    exec screenfetch\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"Bootstrap: docker\nFrom: ubuntu:18.04\n\n%help\n    App: screenfetch\n    Usage: singulaity exec <image name> <command>\n\n%files\n    /etc/apt/sources.list\n    /etc/ssl/certs /etc/ssl/certs\n\n%post\n    apt-get update && apt-get install -y screenfetch\n    rm -rf /var/lib/apt/lists/*\n\n%environment\n    export LC_ALL=C\n\n%runscript\n    exec screenfetch\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Bootstrap 是基础镜像源，From 是基础镜像，%help 是帮助信息，%files 是需要打包的文件。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这个栗子中，我们从 Docker 源获取 Ubuntu 18.04 基础镜像，将本机 apt 软件源配置和 ssl 证书拷贝到容器内的相同位置，然后安装 screenfetch 并清理缓存节省空间，最后设置环境变量和启动容器时执行的命令。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"打包镜像到当前目录。"}]},{"type":"element","tag":"code","props":{"code":"singularity build run.sif screenfetch.def\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"singularity build run.sif screenfetch.def\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"run.sif 就是镜像本体了。容器有多种启动方式，比如，使用 run 指令会运行 runscript 中的语句，而 exec 指令可以自定义容器运行的程序，比如。"}]},{"type":"element","tag":"code","props":{"code":"singularity run run.sif\nsingularity exec run.sif screenfetch\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"singularity run run.sif\nsingularity exec run.sif screenfetch\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"两条命令返回相同的结果。如果你对 Dockerfile 比较熟悉，也可以打包 Docker 镜像，上传到 Docker Hub，然后使用 Singularity 运行 Docker 镜像，这样的镜像体积小很多，比如。"}]},{"type":"element","tag":"code","props":{"code":"singularity exec docker://ubuntu:latest lsb_release -a\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"singularity exec docker://ubuntu:latest lsb_release -a\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"料理"},"children":[{"type":"text","value":"料理"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"有了容器，就算把博客挂到超算上也没问题呦！"}]},{"type":"element","tag":"h3","props":{"id":"多节点部署相同参数"},"children":[{"type":"text","value":"多节点部署（相同参数）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下面尝试部署分布式程序，包含一个主程序和多个子程序，通信协议是 RESTful API。子程序分别部署在多个节点上，相互没有直接通信，由主程序统一调度。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"新建 sbatch 脚本"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"job-worker.sh"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"code","props":{"code":"#!/bin/sh\n#SBATCH --job-name worker\n#SBATCH --error=job-%j.err\n#SBATCH --partition=amd\n#SBATCH --nodes=3\n#SBATCH --ntasks=3\n#SBATCH --cpus-per-task=64\n#SBATCH --no-kill=on\n\nmodule load singularity/3.6\n\nsingularity exec bin.sif <command>\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"#!/bin/sh\n#SBATCH --job-name worker\n#SBATCH --error=job-%j.err\n#SBATCH --partition=amd\n#SBATCH --nodes=3\n#SBATCH --ntasks=3\n#SBATCH --cpus-per-task=64\n#SBATCH --no-kill=on\n\nmodule load singularity/3.6\n\nsingularity exec bin.sif <command>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"sbatch 配置中的 nodes 和 ntasks 保持一致，cpus-per-task 是单个节点的核心数，以保证每个节点运行一个程序（只设定 ntasks 也可以），no-kill 参数可以让单一节点的故障不影响其他节点。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"执行"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"sbatch job-worker.sh"}]},{"type":"text","value":"即可部署集群，"},{"type":"element","tag":"del","props":{},"children":[{"type":"text","value":"但似乎没办法修改任务的运行参数。"}]},{"type":"element","tag":"a","props":{"href":"https://slurm.schedmd.com/sbatch.html","rel":["nofollow"]},"children":[{"type":"text","value":"这里"}]},{"type":"text","value":" filename pattern 的说明，通配符 %A 和 %a 代指作业编号和索引编号，有兴趣可以尝试下能否用在命令参数中。"}]},{"type":"element","tag":"h3","props":{"id":"多节点部署不同参数"},"children":[{"type":"text","value":"多节点部署（不同参数）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"为解决上述问题，将 nodes 和 ntasks 改为 1，这样 sbatch 脚本只会部署单个节点，然后循环执行 sbatch，在每次循环中修改 sbatch 脚本参数，以此实现动态传参的效果。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"sbatch 脚本"}]}]},{"type":"element","tag":"code","props":{"code":"#!/bin/sh\n#SBATCH --job-name worker\n#SBATCH --error=job-%j.err\n#SBATCH --partition=amd\n#SBATCH --ntasks=1\n\nmodule load singularity/3.6\n\nip=$(ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | cut -f1 -d '/')\n\nsingularity exec bin.sif <command> -i $ip -p $1\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"#!/bin/sh\n#SBATCH --job-name worker\n#SBATCH --error=job-%j.err\n#SBATCH --partition=amd\n#SBATCH --ntasks=1\n\nmodule load singularity/3.6\n\nip=$(ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | cut -f1 -d '/')\n\nsingularity exec bin.sif <command> -i $ip -p $1\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"外部脚本"}]}]},{"type":"element","tag":"code","props":{"code":"#!/bin/bash\n\nset -o pipefail\n\nfor i in {23300..23333};\ndo\n    sbatch job-worker.sh $i\n    echo \"Task $i works.\"\ndone\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"#!/bin/bash\n\nset -o pipefail\n\nfor i in {23300..23333};\ndo\n    sbatch job-worker.sh $i\n    echo \"Task $i works.\"\ndone\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在这个栗子中我们部署了 33 个程序，监听的端口各不相同（23300 ~ 23333）。"}]},{"type":"element","tag":"h3","props":{"id":"单节点部署"},"children":[{"type":"text","value":"单节点部署"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果想要多个程序放在一个节点运行，也就是单节点一次提交多个不同的程序。但 Slurm 好像没有这种方法。不过 sbatch 支持 bash 脚本，那直接用 bash 也是可以的吧。"}]},{"type":"element","tag":"code","props":{"code":"#!/bin/sh\n#SBATCH --job-name worker\n#SBATCH --error=job-%j.err\n#SBATCH --partition=amd\n#SBATCH --nodes=1\n#SBATCH --ntasks=1\n#SBATCH --cpus-per-task=64\n\nmodule load singularity/3.6\n\nnohup singularity exec bin.sif <bin1> <command1> >> module1.log 2>&1 &\nsleep 30s\nnohup singularity exec bin.sif <bin2> <command2> >> module2.log 2>&1 &\nwait\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"#!/bin/sh\n#SBATCH --job-name worker\n#SBATCH --error=job-%j.err\n#SBATCH --partition=amd\n#SBATCH --nodes=1\n#SBATCH --ntasks=1\n#SBATCH --cpus-per-task=64\n\nmodule load singularity/3.6\n\nnohup singularity exec bin.sif <bin1> <command1> >> module1.log 2>&1 &\nsleep 30s\nnohup singularity exec bin.sif <bin2> <command2> >> module2.log 2>&1 &\nwait\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这样就在单个节点运行了两个任务。当 sbatch 脚本执行完成后，Slurm 会认为任务结束并释放资源，使用 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"wait"}]},{"type":"text","value":" 可以让 Slurm 等待所有后台任务执行完成。"}]},{"type":"element","tag":"h2","props":{"id":"结论"},"children":[{"type":"text","value":"结论"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"基于上述方法（主要是容器），就是超算也能为所欲为。至于💰代价嘛..."}]}]},"date":"2020-11-26T12:15:40.000Z","tags":["hpc","slurm","linux","container"],"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"概述"},"children":[{"type":"text","value":"概述"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"传统超算由多个计算节点组成，每个节点有自己的操作系统，可独立或与其他节点协同工作。设计难点在于传输带宽和延迟，共享内存，并行存储，散热，软件优化等方面。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"文中使用的超算，其计算节点看起来是个 Linux 服务器，可以 SSH 登录，节点间使用 InfiniBand 协议通信，共享 home 目录。超算常用于并行计算，实际使用中一般不会亲自 SSH 上去部署服务，而是通过任务调度工具，比如 Slurm (Simple Linux Utility for Resource Management)，开源的超算资源管理软件，在 TOP500 超算中占有率超过 50%。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"超算上跑的程序一般都会针对任务调度系统定制优化，比如将大规模优化问题通过数学方法分解成数个子问题，或者 FFT 之类的适合分解的算法，配合调度工具并行计算出结果再迭代解出原问题。"}]},{"type":"element","tag":"h2","props":{"id":"食材"},"children":[{"type":"text","value":"食材"}]},{"type":"element","tag":"h3","props":{"id":"slurm"},"children":[{"type":"text","value":"Slurm"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Slurm 调度工具常见于 Linux 超算，简单说下部署任务时常用的方法。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"salloc"}]},{"type":"text","value":": 先抢占资源，后部署任务。执行 salloc 命令获取节点资源（如果是超算中心需要排队等待，排到后就开始计费），此时可以手动 ssh 登录计算节点。当用户退出节点时任务自动终止，适合软件测试。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"srun"}]},{"type":"text","value":": 交互式提交任务。命令提交后会在终端实时返回程序输出内容，程序退出自动释放资源，适合交互式单节点任务。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"sbatch"}]},{"type":"text","value":": 批量提交任务。将节点类型，任务数量，资源需求等参数和执行程序的命令写在 Bash 脚本中提交，在所有任务执行完成后释放资源（执行失败也会释放），适合并行或多步任务。"}]}]},{"type":"element","tag":"h3","props":{"id":"modules"},"children":[{"type":"text","value":"Modules"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用 pacman / apt 安装软件时会也会自动安装依赖，而超算出于安全和稳定的考虑，禁止用户获取 root 权限，用户不能使用 apt 之类的包管理工具，取而代之的是 environment modules。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Modules 是一个 Shell 初始化工具，可在 Shell 中动态加载依赖的软件/库（由管理员预装）。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"查看可用的 gcc 软件版本。"}]},{"type":"element","tag":"code","props":{"code":"module avail >> module.log 2>&1\ncat module.log | grep gcc\n\ngcc/4.4.7-kd\ngcc/4.9.2-fenggl\ngcc/7.3.0-wzm\ngcc/8.1.0-wjl\ngcc/8.3.0-wzm\ngcc/9.1.0-fenggl\n...\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"module avail "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":">>"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" module.log "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"2>&1"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"cat module.log "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" grep gcc"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"gcc/4.4.7-kd"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"gcc/4.9.2-fenggl"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"gcc/7.3.0-wzm"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"gcc/8.1.0-wjl"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"gcc/8.3.0-wzm"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"gcc/9.1.0-fenggl"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"..."}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"复制软件全称，载入到当前环境。"}]},{"type":"element","tag":"code","props":{"code":"module load gcc/8.1.0-wjl\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"module load gcc/8.1.0-wjl"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"之后就能用 GCC 8.1 编译程序了。但如果是 Python Web 程序，依赖太多，找管理员一个个添加也不太合适。不如换个思路，不知道大家有没有想到容器呢？"}]},{"type":"element","tag":"h3","props":{"id":"singularity"},"children":[{"type":"text","value":"Singularity"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Singularity 是专为超算打造的容器，支持 InfiniBand 和 GPU 等 PCIe 设备，对性能的损耗可以忽略不计。我们可以在本地打包 Singularity 镜像，再到超算上用 environment modules 加载 Singularity 来运行镜像。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"回到正题，那么先尝试部署个 screenfetch 获取节点的硬件信息。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Singularity 兼容 Docker 镜像，也有自己的镜像格式。创建 singularity 定义文件"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"screenfetch.def"}]},{"type":"text","value":"，写入如下内容。"}]},{"type":"element","tag":"code","props":{"code":"Bootstrap: docker\nFrom: ubuntu:18.04\n\n%help\n    App: screenfetch\n    Usage: singulaity exec <image name> <command>\n\n%files\n    /etc/apt/sources.list\n    /etc/ssl/certs /etc/ssl/certs\n\n%post\n    apt-get update && apt-get install -y screenfetch\n    rm -rf /var/lib/apt/lists/*\n\n%environment\n    export LC_ALL=C\n\n%runscript\n    exec screenfetch\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"Bootstrap: docker"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"From: ubuntu:18.04"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"%help"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"    App: screenfetch"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"    Usage: singulaity "}]},{"type":"element","tag":"span","props":{"class":"ct-e09eed"},"children":[{"type":"text","value":"exec"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"image name"}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":">"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"command"}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":">"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"%files"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"    /etc/apt/sources.list"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"    /etc/ssl/certs /etc/ssl/certs"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"%post"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"    apt-get update "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"&&"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" apt-get install -y screenfetch"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"    rm -rf /var/lib/apt/lists/"}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"*"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"%environment"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"export"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" LC_ALL=C"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"%runscript"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-e09eed"},"children":[{"type":"text","value":"exec"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" screenfetch"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Bootstrap 是基础镜像源，From 是基础镜像，%help 是帮助信息，%files 是需要打包的文件。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这个栗子中，我们从 Docker 源获取 Ubuntu 18.04 基础镜像，将本机 apt 软件源配置和 ssl 证书拷贝到容器内的相同位置，然后安装 screenfetch 并清理缓存节省空间，最后设置环境变量和启动容器时执行的命令。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"打包镜像到当前目录。"}]},{"type":"element","tag":"code","props":{"code":"singularity build run.sif screenfetch.def\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"singularity build run.sif screenfetch.def"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"run.sif 就是镜像本体了。容器有多种启动方式，比如，使用 run 指令会运行 runscript 中的语句，而 exec 指令可以自定义容器运行的程序，比如。"}]},{"type":"element","tag":"code","props":{"code":"singularity run run.sif\nsingularity exec run.sif screenfetch\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"singularity run run.sif"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"singularity "}]},{"type":"element","tag":"span","props":{"class":"ct-e09eed"},"children":[{"type":"text","value":"exec"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" run.sif screenfetch"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"两条命令返回相同的结果。如果你对 Dockerfile 比较熟悉，也可以打包 Docker 镜像，上传到 Docker Hub，然后使用 Singularity 运行 Docker 镜像，这样的镜像体积小很多，比如。"}]},{"type":"element","tag":"code","props":{"code":"singularity exec docker://ubuntu:latest lsb_release -a\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"singularity "}]},{"type":"element","tag":"span","props":{"class":"ct-e09eed"},"children":[{"type":"text","value":"exec"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" docker://ubuntu:latest lsb_release -a"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"料理"},"children":[{"type":"text","value":"料理"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"有了容器，就算把博客挂到超算上也没问题呦！"}]},{"type":"element","tag":"h3","props":{"id":"多节点部署相同参数"},"children":[{"type":"text","value":"多节点部署（相同参数）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下面尝试部署分布式程序，包含一个主程序和多个子程序，通信协议是 RESTful API。子程序分别部署在多个节点上，相互没有直接通信，由主程序统一调度。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"新建 sbatch 脚本"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"job-worker.sh"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"code","props":{"code":"#!/bin/sh\n#SBATCH --job-name worker\n#SBATCH --error=job-%j.err\n#SBATCH --partition=amd\n#SBATCH --nodes=3\n#SBATCH --ntasks=3\n#SBATCH --cpus-per-task=64\n#SBATCH --no-kill=on\n\nmodule load singularity/3.6\n\nsingularity exec bin.sif <command>\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a08478"},"children":[{"type":"text","value":"#!/bin/sh"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a08478"},"children":[{"type":"text","value":"#SBATCH --job-name worker"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a08478"},"children":[{"type":"text","value":"#SBATCH --error=job-%j.err"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a08478"},"children":[{"type":"text","value":"#SBATCH --partition=amd"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a08478"},"children":[{"type":"text","value":"#SBATCH --nodes=3"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a08478"},"children":[{"type":"text","value":"#SBATCH --ntasks=3"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a08478"},"children":[{"type":"text","value":"#SBATCH --cpus-per-task=64"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a08478"},"children":[{"type":"text","value":"#SBATCH --no-kill=on"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"module load singularity/3.6"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"singularity "}]},{"type":"element","tag":"span","props":{"class":"ct-e09eed"},"children":[{"type":"text","value":"exec"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" bin.sif "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"command"}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":">"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"sbatch 配置中的 nodes 和 ntasks 保持一致，cpus-per-task 是单个节点的核心数，以保证每个节点运行一个程序（只设定 ntasks 也可以），no-kill 参数可以让单一节点的故障不影响其他节点。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"执行"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"sbatch job-worker.sh"}]},{"type":"text","value":"即可部署集群，"},{"type":"element","tag":"del","props":{},"children":[{"type":"text","value":"但似乎没办法修改任务的运行参数。"}]},{"type":"element","tag":"a","props":{"href":"https://slurm.schedmd.com/sbatch.html","rel":["nofollow"]},"children":[{"type":"text","value":"这里"}]},{"type":"text","value":" filename pattern 的说明，通配符 %A 和 %a 代指作业编号和索引编号，有兴趣可以尝试下能否用在命令参数中。"}]},{"type":"element","tag":"h3","props":{"id":"多节点部署不同参数"},"children":[{"type":"text","value":"多节点部署（不同参数）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"为解决上述问题，将 nodes 和 ntasks 改为 1，这样 sbatch 脚本只会部署单个节点，然后循环执行 sbatch，在每次循环中修改 sbatch 脚本参数，以此实现动态传参的效果。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"sbatch 脚本"}]}]},{"type":"element","tag":"code","props":{"code":"#!/bin/sh\n#SBATCH --job-name worker\n#SBATCH --error=job-%j.err\n#SBATCH --partition=amd\n#SBATCH --ntasks=1\n\nmodule load singularity/3.6\n\nip=$(ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | cut -f1 -d '/')\n\nsingularity exec bin.sif <command> -i $ip -p $1\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a08478"},"children":[{"type":"text","value":"#!/bin/sh"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a08478"},"children":[{"type":"text","value":"#SBATCH --job-name worker"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a08478"},"children":[{"type":"text","value":"#SBATCH --error=job-%j.err"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a08478"},"children":[{"type":"text","value":"#SBATCH --partition=amd"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a08478"},"children":[{"type":"text","value":"#SBATCH --ntasks=1"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"module load singularity/3.6"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"ip="}]},{"type":"element","tag":"span","props":{"class":"ct-e7dd79"},"children":[{"type":"text","value":"$(ip addr "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"class":"ct-e7dd79"},"children":[{"type":"text","value":" grep 'state UP' -A2 "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"class":"ct-e7dd79"},"children":[{"type":"text","value":" tail -n1 "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"class":"ct-e7dd79"},"children":[{"type":"text","value":" awk '{print $2}' "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"|"}]},{"type":"element","tag":"span","props":{"class":"ct-e7dd79"},"children":[{"type":"text","value":" cut -f1 -d '/')"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"singularity "}]},{"type":"element","tag":"span","props":{"class":"ct-e09eed"},"children":[{"type":"text","value":"exec"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" bin.sif "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"command"}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":">"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" -i $ip -p $1"}]}]}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"外部脚本"}]}]},{"type":"element","tag":"code","props":{"code":"#!/bin/bash\n\nset -o pipefail\n\nfor i in {23300..23333};\ndo\n    sbatch job-worker.sh $i\n    echo \"Task $i works.\"\ndone\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a08478"},"children":[{"type":"text","value":"#!/bin/bash"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-e09eed"},"children":[{"type":"text","value":"set"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" -o pipefail"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"for"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" i "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"in"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" {23300..23333}"}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":";"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"do"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"    sbatch job-worker.sh $i"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"    "}]},{"type":"element","tag":"span","props":{"class":"ct-e09eed"},"children":[{"type":"text","value":"echo"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-e7dd79"},"children":[{"type":"text","value":"\"Task "}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"$i"}]},{"type":"element","tag":"span","props":{"class":"ct-e7dd79"},"children":[{"type":"text","value":" works.\""}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"done"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在这个栗子中我们部署了 33 个程序，监听的端口各不相同（23300 ~ 23333）。"}]},{"type":"element","tag":"h3","props":{"id":"单节点部署"},"children":[{"type":"text","value":"单节点部署"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果想要多个程序放在一个节点运行，也就是单节点一次提交多个不同的程序。但 Slurm 好像没有这种方法。不过 sbatch 支持 bash 脚本，那直接用 bash 也是可以的吧。"}]},{"type":"element","tag":"code","props":{"code":"#!/bin/sh\n#SBATCH --job-name worker\n#SBATCH --error=job-%j.err\n#SBATCH --partition=amd\n#SBATCH --nodes=1\n#SBATCH --ntasks=1\n#SBATCH --cpus-per-task=64\n\nmodule load singularity/3.6\n\nnohup singularity exec bin.sif <bin1> <command1> >> module1.log 2>&1 &\nsleep 30s\nnohup singularity exec bin.sif <bin2> <command2> >> module2.log 2>&1 &\nwait\n","language":"bash"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a08478"},"children":[{"type":"text","value":"#!/bin/sh"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a08478"},"children":[{"type":"text","value":"#SBATCH --job-name worker"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a08478"},"children":[{"type":"text","value":"#SBATCH --error=job-%j.err"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a08478"},"children":[{"type":"text","value":"#SBATCH --partition=amd"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a08478"},"children":[{"type":"text","value":"#SBATCH --nodes=1"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a08478"},"children":[{"type":"text","value":"#SBATCH --ntasks=1"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-a08478"},"children":[{"type":"text","value":"#SBATCH --cpus-per-task=64"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"module load singularity/3.6"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"nohup singularity "}]},{"type":"element","tag":"span","props":{"class":"ct-e09eed"},"children":[{"type":"text","value":"exec"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" bin.sif "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"bin"}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"1>"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"command"}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"1>"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":">>"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" module1.log "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"2>&1"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"&"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"sleep 30s"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"nohup singularity "}]},{"type":"element","tag":"span","props":{"class":"ct-e09eed"},"children":[{"type":"text","value":"exec"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" bin.sif "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"bin"}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"2>"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"<"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":"command"}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"2>"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":">>"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" module2.log "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"2>&1"}]},{"type":"element","tag":"span","props":{"class":"ct-2130d2"},"children":[{"type":"text","value":" "}]},{"type":"element","tag":"span","props":{"class":"ct-6e7bd7"},"children":[{"type":"text","value":"&"}]}]},{"type":"element","tag":"span","props":{"class":"line"},"children":[{"type":"element","tag":"span","props":{"class":"ct-e09eed"},"children":[{"type":"text","value":"wait"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这样就在单个节点运行了两个任务。当 sbatch 脚本执行完成后，Slurm 会认为任务结束并释放资源，使用 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"wait"}]},{"type":"text","value":" 可以让 Slurm 等待所有后台任务执行完成。"}]},{"type":"element","tag":"h2","props":{"id":"结论"},"children":[{"type":"text","value":"结论"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"基于上述方法（主要是容器），就是超算也能为所欲为。至于💰代价嘛..."}]},{"type":"element","tag":"style","children":[{"type":"text","value":".ct-e7dd79{color:#0A3069}.ct-a08478{color:#6E7781}.ct-e09eed{color:#0550AE}.ct-6e7bd7{color:#CF222E}.ct-2130d2{color:#24292F}.dark .ct-2130d2{color:#C9D1D9}.dark .ct-6e7bd7{color:#FF7B72}.dark .ct-e09eed{color:#79C0FF}.dark .ct-a08478{color:#8B949E}.dark .ct-e7dd79{color:#A5D6FF}"}]}],"toc":{"title":"","searchDepth":5,"depth":5,"links":[{"id":"概述","depth":2,"text":"概述"},{"id":"食材","depth":2,"text":"食材","children":[{"id":"slurm","depth":3,"text":"Slurm"},{"id":"modules","depth":3,"text":"Modules"},{"id":"singularity","depth":3,"text":"Singularity"}]},{"id":"料理","depth":2,"text":"料理","children":[{"id":"多节点部署相同参数","depth":3,"text":"多节点部署（相同参数）"},{"id":"多节点部署不同参数","depth":3,"text":"多节点部署（不同参数）"},{"id":"单节点部署","depth":3,"text":"单节点部署"}]},{"id":"结论","depth":2,"text":"结论"}]}},"_type":"markdown","_id":"content:blog:use-hpc-like-pc.md","_source":"content","_file":"blog/use-hpc-like-pc.md","_extension":"md"}